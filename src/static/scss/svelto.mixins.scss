
/* ASSERT */

// Values in a map are in ascending order

@mixin assert-ascending ( $obj, $error: 'Values must be defined in ascending order' ) {

  $previous: null;
  $type: type-of( $obj );

  @if $type == 'list' {

    @for $i from 1 through length( $obj ) {

      $value: nth( $obj, $i );

      @if $previous != null and $previous >= $value {

        @error $error;

      }

      $previous: $value;

    }

  } @else if $type == 'map' {

    @each $key, $value in $obj {

      @if $previous != null and $previous >= $value {

        @error $error;

      }

      $previous: $value;

    }

  } @else {

    @warn '`#{$type}` is not a supported $obj type for `assert-ascending`';

  }

}

// Values in a map are in descending order

@mixin assert-descending ( $map, $error: 'Values must be defined in descending order' ) {

  $previous: null;
  $type: type-of( $obj );

  @if $type == 'list' {

    @for $i from 1 through length( $obj ) {

      $value: nth( $obj, $i );

      @if $previous != null and $previous <= $value {

        @error $error;

      }

      $previous: $value;

    }

  } @else if $type == 'map' {

    @each $key, $value in $obj {

      @if $previous != null and $previous <= $value {

        @error $error;

      }

      $previous: $value;

    }

  } @else {

    @warn '`#{$type}` is not a supported $obj type for `assert-ascending`';

  }

}


/* BORDER RADIUS */

@mixin border-top-radius ( $radius ) {
  border-top-right-radius: $radius;
  border-top-left-radius: $radius;
}

@mixin border-right-radius ( $radius ) {
  border-bottom-right-radius: $radius;
  border-top-right-radius: $radius;
}

@mixin border-bottom-radius ( $radius ) {
  border-bottom-right-radius: $radius;
  border-bottom-left-radius: $radius;
}

@mixin border-left-radius ( $radius ) {
  border-bottom-left-radius: $radius;
  border-top-left-radius: $radius;
}


/* CLEARFIX */

@mixin clearfix () {

  &::after {
    content: '';
    display: table;
    clear: both;
  }

}


/* DIMENSION */

@mixin dimension ( $width, $height: $width ) {
  width: $width;
  height: $height;
}

@mixin dimension-force ( $width, $height: $width ) {
  width: $width;
  min-width: $width;
  max-width: $width;
  height: $height;
  min-height: $height;
  max-height: $height;
}


/* GRADIENT */

@mixin gradient-x ( $start-color, $end-color, $start-percent: 0%, $end-percent: 100% ) {
  background-image: linear-gradient( to right, $start-color $start-percent, $end-color $end-percent );
  background-repeat: repeat-x;
}

@mixin gradient-y ( $start-color, $end-color, $start-percent: 0%, $end-percent: 100% ) {
  background-image: linear-gradient( to bottom, $start-color $start-percent, $end-color $end-percent );
  background-repeat: repeat-x;
}

@mixin gradient-directional ( $start-color, $end-color, $deg: 45deg ) {
  background-image: linear-gradient( $deg, $start-color, $end-color );
  background-repeat: repeat-x;
}

@mixin gradient-radial ( $inner-color, $outer-color ) {
  background-image: radial-gradient( circle, $inner-color, $outer-color );
  background-repeat: no-repeat;
}


/* LIST */

@function first ( $list ) {
  @return nth( $list, 1 );
}

@function last ( $list ) {
  @return nth( $list, length( $list ) );
}


/* MARGIN */

@mixin margin-x ( $margin ) {
  margin-right: $margin;
  margin-left: $margin;
}

@mixin margin-y ( $margin ) {
  margin-top: $margin;
  margin-bottom: $margin;
}


/* PADDING */

@mixin padding-x ( $padding ) {
  padding-right: $padding;
  padding-left: $padding;
}

@mixin padding-y ( $padding ) {
  padding-top: $padding;
  padding-bottom: $padding;
}


/* PRIVATE */

@mixin _position-set-coordinate ( $type, $value ) {

  @if $value != false and $value != null {
    #{$type}: $value;
  }

}

/* POSITION */

@mixin position ( $position, $coordinates ) {

  @if $position != false and $position != null {
    position: $position;
  }

  $nr: length( $coordinates );

  @if $nr == 1 {

    $value: first( $coordinates );

    @include _position-set-coordinate( top, $value );
    @include _position-set-coordinate( right, $value );
    @include _position-set-coordinate( bottom, $value );
    @include _position-set-coordinate( left, $value );

  } @else if $nr == 2 {

    $value-y: first( $coordinates );
    $value-x: last( $coordinates );

    @include _position-set-coordinate( top, $value-y );
    @include _position-set-coordinate( right, $value-x );
    @include _position-set-coordinate( bottom, $value-y );
    @include _position-set-coordinate( left, $value-x );

  } @else if ( $nr == 3 ) {

    $value-top: first( $coordinates );
    $value-x: nth( $coordinates, 2 );
    $value-bottom: last( $coordinates );

    @include _position-set-coordinate( top, $value-top );
    @include _position-set-coordinate( right, $value-x );
    @include _position-set-coordinate( bottom, $value-bottom );
    @include _position-set-coordinate( left, $value-x );

  } @else if ( $nr == 4 ) {

    $value-top: first( $coordinates );
    $value-right: nth( $coordinates, 2 );
    $value-bottom: nth( $coordinates, 3 );
    $value-left: last( $coordinates );

    @include _position-set-coordinate( top, $value-top );
    @include _position-set-coordinate( right, $value-right );
    @include _position-set-coordinate( bottom, $value-bottom );
    @include _position-set-coordinate( left, $value-left );

  }

}

/* SPECIFIC */

@mixin absolute ( $coordinates ) {

  @include position ( absolute, $coordinates );

}

@mixin fixed ( $coordinates ) {

  @include position ( fixed, $coordinates );

}

@mixin relative ( $coordinates ) {

  @include position ( relative, $coordinates );

}

@mixin static ( $coordinates ) {

  @include position ( static, $coordinates );

}


// @require _/dimension/mixins.scss
// @require _/position/mixins.scss

/* FILL */

@mixin fill {
  @include dimension ( 100% );
}

@mixin fill-absolute {
  @include absolute ( 0 );
}

@mixin fill-fixed {
  @include fixed ( 0 );
}

@mixin fill-viewport {
  @include dimension ( 100vw, 100vh );
}


// @require _/fill/mixins.scss
// @require _/margin/mixins.scss

/* CENTER */

@mixin center-margin ( $max-width: false ) {

  @include margin-x ( auto );

  @if $max-width {
    max-width: $max-width;
  }

}

// `$axis` can be either: `x`, `y` or `false` for both

@mixin center-transform ( $axis: false ) {

  @if $axis != x {
    top: 50%;
  }

  @if $axis != y {
    left: 50%;
  }

  @if not $axis {

    transform: translate(-50%, -50%);

  } @else if $axis != x {

    transform: translateY(-50%);

  } @else if $axis != y {

    transform: translateX(-50%);

  }

}

/* ABSOLUTE */

@mixin center-absolute ( $width: false, $height: false ) {

  position: absolute;

  @if $width {
    left: 50%;
    margin-left: ( - $width / 2 );
  }

  @if $height {
    top: 50%;
    margin-top: ( - $height / 2 );
  }

}

@mixin center-absolute-fill () {

  @include fill-absolute ();
  margin: auto;

}

@mixin center-absolute-transform ( $axis: false ) {

  @include center-transform ( $axis );
  position: absolute;

}

/* FIXED */

@mixin center-fixed-fill () {

  @include fill-fixed ();
  margin: auto;

}

@mixin center-fixed-transform ( $axis: false ) {

  @include center-transform ( $axis );
  position: fixed;

}


/* HDPI */

@mixin media-hdpi ( $ratio: 2 ) {

  @if $ratio > 1 {

    @media only screen and ( -webkit-min-device-pixel-ratio: $ratio ),
           only screen and ( min-resolution: #{round( $ratio * 96 )}dpi ) {
      @content;
    }

  } @else {

    @content;

  }

}


// @require _/screen/hdpi/mixins.scss

/* IMAGE */

// If `$images` is a list, each index represent the hdpi value
// If `$images` is a map, it must be on the form of `hdpi: image`

@mixin image-retina ( $width, $height, $images ) {

  $type: type-of( $images );

  @if $type == 'list' {

    @for $i from 1 through length( $images ) {

      $image: nth( $images, $i );

      @if $image {

        @include media-hdpi ( $i ) {
          background-image: url(#{$image});
          background-size: $width $height;
        }

      }

    }

  } @else if $type == 'map' {

    @each $hdpi, $image in $images {

      @include media-hdpi ( $hdpi ) {
        background-image: url(#{$image});
        background-size: $width $height;
      }

    }

  } @else {

    @warn '`#{$type}` is not a support $images type for `image-retina`';

  }

}


/* HEIGHT */

@mixin media-height-up ( $height ) {

  @media screen and ( min-height: $height ) {
    @content;
  }

}

@mixin media-height-down ( $height ) {

  @media screen and ( max-height: $height ) {
    @content;
  }

}

@mixin media-height-range ( $height-min, $height-max ) {

  @media screen and ( min-height: $height-min ) and ( max-height: $height-max ) {
    @content;
  }

}

@mixin media-height-xrange ( $height-min, $height-max ) {

  @media screen and ( max-height: $height-min ), screen and ( min-height: $height-max ) {
    @content;
  }

}


/* WIDTH */

@mixin media-width-up ( $width ) {

  @media screen and ( min-width: $width ) {
    @content;
  }

}

@mixin media-width-down ( $width ) {

  @media screen and ( max-width: $width ) {
    @content;
  }

}

@mixin media-width-range ( $width-min, $width-max ) {

  @media screen and ( min-width: $width-min ) and ( max-width: $width-max ) {
    @content;
  }

}

@mixin media-width-xrange ( $width-min, $width-max ) {

  @media screen and ( max-width: $width-min ), screen and ( min-width: $width-max ) {
    @content;
  }

}


//SOURCE: https://github.com/twbs/bootstrap/blob/v4-dev/scss/mixins/_screen-reader.scss

/* SCREEN READER */

@mixin screen-reader-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  border: 0;
}

@mixin screen-reader-only-focusable {

  &:active,
  &:focus {
    position: static;
    width: auto;
    height: auto;
    margin: 0;
    overflow: visible;
    clip: auto;
  }

}


//SOURCE: https://github.com/danielguillan/quantity-queries

/* QUANTITY */

// Quantity equal or greater than `$min`

@mixin quantity-up ( $min, $selector: null ) {

  @if type-of( $min ) != 'number' or not unitless( $min ) or $min < 1 {
    @error '`#{$min}` is not a valid number for `quantity-up`';
  }

  @if $selector != null and ( type-of( $selector ) != 'string' or length( $selector ) > 1 ) {
    @error '`#{$selector}` is not a valid selector for `quantity-up`';
  }

  $selector-append: ':nth-last-child(n+#{$min})';
  $selector-up: _quantity-build-selector( $selector-append, $selector );

  @at-root #{$selector-up} {
    @content;
  }

}

// Quantity equal or lower than `$max`

@mixin quantity-down ( $max, $selector: null ) {

  @if type-of( $max ) != 'number' or not unitless( $max ) or $max < 1 {
    @error '`#{$max}` is not a valid number for `quantity-down`.';
  }

  @if $selector != null and ( type-of( $selector ) != 'string' or length( $selector ) > 1 ) {
    @error '`#{$selector}` is not a valid selector for `quantity-down`';
  }

  $selector-append: ':nth-last-child(-n+#{$max}):first-child';
  $selector-down: _quantity-build-selector( $selector-append, $selector );

  @at-root #{$selector-down} {
    @content;
  }

}

// Quantity equal to `$number`

@mixin quantity-only ( $number, $selector: null ) {

  @if type-of( $number ) != 'number' or not unitless( $number ) or $number < 1 {
    @error '`#{$number}` is not a valid number for `quantity-only`';
  }

  @if $selector != null and ( type-of( $selector ) != 'string' or length( $selector ) > 1 ) {
    @error '`#{$selector}` is not a valid selector for `quantity-only`';
  }

  $selector-append: ':nth-last-child(#{$number}):first-child';
  $selector-only: _quantity-build-selector( $selector-append, $selector );

  @at-root #{$selector-only} {
    @content;
  }

}

// Quantity within `$min` and `$max`

@mixin quantity-range ( $min, $max, $selector: null ) {

  @if type-of( $min ) != 'number' or not unitless( $min ) or $min < 1 {
    @error '`#{$min}` is not a valid number for `quantity-range`';
  }

  @if type-of( $max ) != 'number' or not unitless( $max ) or $max < 1 {
    @error '`#{$max}` is not a valid number for `quantity-range`';
  }

  @if $min > $max {
    @error '#{$min} can\'t be larger that #{$max} for `quantity-range`';
  }

  @if $selector != null and ( type-of( $selector ) != 'string' or length( $selector ) > 1 ) {
    @error '`#{$selector}` is not a valid selector for `quantity-range`';
  }

  $selector-append: ':nth-last-child(n+#{$min}):nth-last-child(-n+#{$max}):first-child';
  $selector-range: _quantity-build-selector( $selector-append, $selector );

  @at-root #{$selector-range} {
    @content;
  }

}


/* OTHERS */

@mixin text-wrap () {
  overflow-wrap: break-word;
  word-wrap: break-word;
  word-break: break-word;
  hyphens: auto;
}

@mixin text-no-wrap () {
  overflow-wrap: normal;
  word-wrap: normal;
  word-break: normal;
  hyphens: manual;
}

@mixin text-truncate () {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  max-width: 100%; // Fixes a bug in IE 10
}

//SOURCE: https://github.com/twbs/bootstrap/blob/v4-dev/scss/utilities/_screenreaders.scss

@mixin text-hide () {
  font: 0/0 svelto; // Setting `_` as the font name is not supported in IE/Edge
  color: transparent;
  text-shadow: none;
  background-color: transparent;
  border: 0;
}


/* BREAKPOINTS */

// Viewport equal or greater than `$breakpoint`

@mixin media-breakpoint-up ( $breakpoint ) {

  $min: breakpoint-min( $breakpoint );

  @if $min {

    @media ( min-width: $min ) {
      @content;
    }

  } @else {

    @content;

  }

}

// Viewport equal or lower than `$breakpoint`

@mixin media-breakpoint-down ( $breakpoint ) {

  $max: breakpoint-max( $breakpoint );

  @if $max {

    @media ( max-width: $max ) {
      @content;
    }

  } @else {

    @content;

  }

}

// Viewport within `$breakpoint`

@mixin media-breakpoint-only ( $breakpoint ) {

  @include media-breakpoint-up( $breakpoint ) {

    @include media-breakpoint-down( $breakpoint ) {

      @content;

    }

  }

}

// Viewport within 2 `$breakpoint-lower` and `$breakpoint-upper`

@mixin media-breakpoint-range ( $breakpoint-lower, $breakpoint-upper ) {

  @include media-breakpoint-up( $breakpoint-lower ) {

    @include media-breakpoint-down( $breakpoint-upper ) {

      @content;

    }

  }

}

// Viewport outside 2 `$breakpoint-lower` and `$breakpoint-upper`

@mixin media-breakpoint-xrange ( $breakpoint-lower, $breakpoint-upper ) {

  $width-min: breakpoint-min( $breakpoint-lower );
  $width-max: breakpoint-max( $breakpoint-upper );

  @media screen and ( max-width: $width-min ), screen and ( min-width: $width-max ) {
    @content;
  }

}


// @require _/gradient/mixins.scss

/* GRADIENT */

@mixin gradient-x-from-color ( $color ) {
  $start-end: gradient-get-start-end-from-color( $color );
  @include gradient-x ( nth( $start-end, 1 ), nth( $start-end, 2 ), 0%, 100% );
}

@mixin gradient-y-from-color ( $color ) {
  $start-end: gradient-get-start-end-from-color( $color );
  @include gradient-y ( nth( $start-end, 1 ), nth( $start-end, 2 ), 0%, 100% );
}


/* GUTTER */

@mixin last-child-no-gutter ( $normal: $gutter, $none: 0 ) {

  &:last-child {

    margin-bottom: $none;

    %multiple > & {
      margin-bottom: $normal;
    }

  }

}

@mixin children-no-gutter () {

  > * {
    margin-bottom: 0 !important;
  }

  > script:last-child {
    display: none !important;
  }

}


/* ACTIONABLE */

@mixin actionable-inline () {
  touch-action: manipulation;
  cursor: pointer;
}


/* COLOR */

@mixin color ( $color, $force: false, $basic: false ) {

  @if not $force {

    $selector: colors-get-undefined-selector();

    &#{$selector} {

      @if not $basic {

        @if $svelto-development { // For performance reasons
          @include color-inline ( $color, 'full' );
        } @else {
          @extend %color-#{$color};
        }

      } @else {

        @if $svelto-development { // For performance reasons
          @include color-inline ( $color, 'base' );
        } @else {
          @extend %color-#{$color}-base;
        }

      }

    }

  } @else {

    @if not $basic {

      @extend %color-#{$color};

    } @else {

      @extend %color-#{$color}-base;

    }

  }

}

@mixin color-inline ( $color, $type ) {

  $datas: map-get( $colors, $color );

  $bg: nth( $datas, 1 );
  $bg-hover: nth( $datas, 2 );
  $bg-active: nth( $datas, 3 );
  $border: nth( $datas, 4 );
  $text: nth( $datas, 6 );

  @if $type == 'base' {

    background-color: $bg;
    border-color: $border;
    color: $text;

  } @else if $type == 'hover' {

    background-color: $bg-hover;

  } @else if $type == 'active' {

    background-color: $bg-active;

  } @else if $type == 'full' {

    @include color-inline ( $color, 'base' );

    &.hover,
    &:hover {
      @include color-inline ( $color, 'hover' );
    }

    &.active,
    &:active {
      @include color-inline ( $color, 'active' );
    }

  }

}


/* SIZE */

@mixin size ( $size, $force: false, $basic: false ) {

  @if not $force {

    $selector: sizes-get-undefined-selector();

    &#{$selector} {

      @if not $basic {

        @extend %size-#{$size};

      } @else {

        @extend %size-#{$size}-base;

      }

    }

  } @else {

    @if not $basic {

      @extend %size-#{$size};

    } @else {

      @extend %size-#{$size}-base;

    }

  }

}

@mixin size-inline ( $size ) {

  $font-size: map-get( $sizes, $size );

  font-size: $font-size;

}


/* Z-DEPTH */

@mixin z-depth ( $depth, $force: false, $basic: false ) {

  @if not $force {

    $selector: z-depths-get-undefined-selector();

    &#{$selector} {

      @if not $basic {

        @extend %z-depth-#{$depth};

      } @else {

        @extend %z-depth-#{$depth}-base;

      }

    }

  } @else {

    @if not $basic {

      @extend %z-depth-#{$depth};

    } @else {

      @extend %z-depth-#{$depth}-base;

    }

  }

}

@mixin z-depth-inline ( $depth ) {

  $z-depth: map-get( $z-depths, $depth );

  box-shadow: $z-depth;

}


// @require decorators/z_depths/mixins.scss

/* RAISABLE */

@mixin raisable ( $depth: false, $force: false ) {

  @if $depth != false {

    @include z-depth ( $depth, $force );

    @if not $force {

      @extend %raisable;

    } @else {

      @extend %raisable%z-depth-#{$depth};

    }

  } @else {

    @extend %raisable;

  }

}

@mixin raisable-inline ( $depth ) {

  @include z-depth-inline ( raisable-next( $depth ) );

}


/* CIRCLE */

@mixin circle ( $size: 1em ) {
  width: $size;
  height: $size;
  border-radius: 50%;
}


/* SQUARE */

@mixin square ( $size: 1em ) {
  width: $size;
  height: $size;
}


/* TRIANGLE */

@mixin triangle ( $size: 1em, $direction: top ) {

  $size: $size / 2;
  border-width: $size;
  border-style: solid;

  @if $direction == top-left {

    border-bottom-color: transparent;
    border-right-color: transparent;

  } @else if $direction == top-right {

    border-bottom-color: transparent;
    border-left-color: transparent;

  } @else if $direction == bottom-right {

    border-top-color: transparent;
    border-left-color: transparent;

  } @else if $direction == bottom-left {

    border-top-color: transparent;
    border-right-color: transparent;

  } @else if $direction == bottom {

    border-right-color: transparent;
    border-bottom-color: transparent;
    border-left-color: transparent;

  } @else if $direction == right {

    border-top-color: transparent;
    border-right-color: transparent;
    border-bottom-color: transparent;

  } @else if $direction == left {

    border-top-color: transparent;
    border-bottom-color: transparent;
    border-left-color: transparent;

  } @else { // Defaulting to `top`

    border-top-color: transparent;
    border-right-color: transparent;
    border-left-color: transparent;

  }

}


// @require decorators/z_depths/mixins.scss

/* QUEUE */

@mixin toast-queue-expand {

  width: 100%;
  margin: 0 !important;

  &:not(:empty) {
    @include z-depth-inline ( $toast-z-depth );
  }

  .toast {
    @include z-depth-inline ( 0 );
    width: 100%;
    margin: 0 !important;
    border-right-width: 0;
    border-left-width: 0;
    border-radius: 0;
  }

}


/* COLOR */

@mixin color-link ( $color, $force: false, $basic: false ) {

  @if not $force {

    $selector: colors-link-get-undefined-selector();

    &#{$selector} {

      @if not $basic {

        @extend %color-#{$color}-link;

      } @else {

        @extend %color-#{$color}-link-base;

      }

    }

  } @else {

    @if not $basic {

      @extend %color-#{$color}-link;

    } @else {

      @extend %color-#{$color}-link-base;

    }

  }

}

@mixin color-link-inline ( $color, $type ) {

  $datas: map-get( $colors, $color );

  $bg: nth( $datas, 1 );
  $bg-hover: nth( $datas, 2 );
  $bg-active: nth( $datas, 3 );

  @if $type == 'base' {

    color: $bg;

  } @else if $type == 'hover' {

    color: $bg-hover;

  } @else if $type == 'active' {

    color: $bg-active;

  } @else if $type == 'full' {

    @include color-link-inline ( $color, 'base' );

    &:hover {
      @include color-link-inline ( $color, 'hover' );
    }

    &:active {
      @include color-link-inline ( $color, 'active' );
    }

  }

}
